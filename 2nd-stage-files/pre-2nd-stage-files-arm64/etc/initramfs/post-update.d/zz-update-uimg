#!/bin/sh
# Generate initrd.uimg and update U-Boot boot.scr

# Kernel ABI string
ABI="${1}"

# Create U-Boot ramdisk image
mkimage -A arm64 -T ramdisk -C none -d "/boot/initrd.img-${ABI}" "/boot/initrd.uimg-${ABI}"

FDT=/usr/lib/linux
[ -d "/lib/firmware/${ABI}/device-tree" ] && FDT="/lib/firmware/${ABI}/device-tree"
[ -d "/usr/lib/linux-image-${ABI}" ] && FDT="/usr/lib/linux-image-${ABI}"

# Create U-Boot boot script
cat << EOF > /boot/boot.cmd
load \${devtype} \${devnum}:\${distro_bootpart} \${kernel_addr_r} /boot/vmlinuz-${ABI}
load \${devtype} \${devnum}:\${distro_bootpart} \${ramdisk_addr_r} /boot/initrd.uimg-${ABI}
part uuid \${devtype} \${devnum}:\${distro_bootpart} partuuid
setenv bootargs root=PARTUUID=\${partuuid} rw rootwait
if test -e \${devtype} \${devnum}:\${distro_bootpart} ${FDT}/\${fdtfile}; then
  load \${devtype} \${devnum}:\${distro_bootpart} \${fdt_addr_r} ${FDT}/\${fdtfile}
  booti \${kernel_addr_r} \${ramdisk_addr_r} \${fdt_addr_r}
else
  booti \${kernel_addr_r} \${ramdisk_addr_r} \${fdt_addr}
fi
EOF

# Create U-Boot boot script
mkimage -A arm64 -T script -C none -d /boot/boot.cmd /boot/boot.scr
